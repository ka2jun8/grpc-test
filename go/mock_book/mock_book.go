// Code generated by MockGen. DO NOT EDIT.
// Source: proto/book.pb.go

// Package mock_book is a generated GoMock package.
package mock_book

import (
	gomock "github.com/golang/mock/gomock"
	proto "github.com/ka2jun8/grpc-test/go/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockBookServiceClient is a mock of BookServiceClient interface
type MockBookServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceClientMockRecorder
}

// MockBookServiceClientMockRecorder is the mock recorder for MockBookServiceClient
type MockBookServiceClientMockRecorder struct {
	mock *MockBookServiceClient
}

// NewMockBookServiceClient creates a new mock instance
func NewMockBookServiceClient(ctrl *gomock.Controller) *MockBookServiceClient {
	mock := &MockBookServiceClient{ctrl: ctrl}
	mock.recorder = &MockBookServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookServiceClient) EXPECT() *MockBookServiceClientMockRecorder {
	return m.recorder
}

// GetBook mocks base method
func (m *MockBookServiceClient) GetBook(ctx context.Context, in *proto.GetBookRequest, opts ...grpc.CallOption) (*proto.GetBookResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBook", varargs...)
	ret0, _ := ret[0].(*proto.GetBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook
func (mr *MockBookServiceClientMockRecorder) GetBook(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookServiceClient)(nil).GetBook), varargs...)
}

// MockBookServiceServer is a mock of BookServiceServer interface
type MockBookServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceServerMockRecorder
}

// MockBookServiceServerMockRecorder is the mock recorder for MockBookServiceServer
type MockBookServiceServerMockRecorder struct {
	mock *MockBookServiceServer
}

// NewMockBookServiceServer creates a new mock instance
func NewMockBookServiceServer(ctrl *gomock.Controller) *MockBookServiceServer {
	mock := &MockBookServiceServer{ctrl: ctrl}
	mock.recorder = &MockBookServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookServiceServer) EXPECT() *MockBookServiceServerMockRecorder {
	return m.recorder
}

// GetBook mocks base method
func (m *MockBookServiceServer) GetBook(arg0 context.Context, arg1 *proto.GetBookRequest) (*proto.GetBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook
func (mr *MockBookServiceServerMockRecorder) GetBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookServiceServer)(nil).GetBook), arg0, arg1)
}
